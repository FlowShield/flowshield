{
  "language": "Solidity",
  "sources": {
    "contracts/CloudSlitDao.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"./Erc20.sol\";\n\ncontract CloudSlitDao is ERC20 {\n\n    struct userWallet {\n        address user;\n        uint8 status;\n    }\n\n    struct Order {\n        string name;\n        uint startTime;\n        uint endTime;\n        uint withdrawDuration;\n        uint32 duration;\n        uint amount;\n        bool used;\n        bool withdraw;\n        address payAddress;\n        address privoderAddress;\n    }\n\n    mapping(string => userWallet) userWallets;\n\n    //Initialize variables\n    uint public _fullnodeDepositAmount;\n    uint public _privoderDepositAmount;\n    uint32 _durationUnit;\n    // // A mapping is a key/value map. Here we store each staked user.\n    mapping(address => uint) _fullnodeDeposits;\n    mapping(address => uint) _privoderDeposits;\n\n    mapping(string=>Order) _orders;\n    mapping(address=>string[]) _privoderOrders;\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _mint(msg.sender, 100000000 * 10 ** decimals);\n\n        _fullnodeDepositAmount = 5000 * 10 ** decimals;\n        _privoderDepositAmount = 1000 * 10 ** decimals;\n        _durationUnit = 1 hours;\n    }\n\n\n    function getWallet(string memory uuid) external view returns(address, uint8){\n        return (userWallets[uuid].user, userWallets[uuid].status);\n    }\n\n    function bindWallet(string memory uuid) external {\n        require(userWallets[uuid].user == address(0));\n        if (_fullnodeDeposits[msg.sender] == 0) {\n            userWallets[uuid] = userWallet(msg.sender, 1);\n        }else{\n            userWallets[uuid] = userWallet(msg.sender, 2);\n        }\n    }\n\n    function unbindWallet(string memory uuid) external {\n        require(userWallets[uuid].user == msg.sender);\n        delete userWallets[uuid];\n    }\n\n    function verifyWallet(string memory uuid) external {\n        require(_fullnodeDeposits[msg.sender] > 0);\n        require(userWallets[uuid].status == 1);\n        userWallets[uuid].status = 2;\n    }\n\n    function changeWallet(string memory uuid, address newWallet) external {\n        require(newWallet != address(0));\n        if (userWallets[uuid].status == 1){\n            userWallets[uuid].user = newWallet;\n        }else{\n            require(userWallets[uuid].user == msg.sender);\n            userWallets[uuid].user = newWallet;\n        }\n    }\n\n    function getUserInfo(string memory uuid) external view returns(bool, bool){\n        if(userWallets[uuid].status == 2){\n            return ((_fullnodeDeposits[userWallets[uuid].user] > 0), (_privoderDeposits[userWallets[uuid].user] > 0));\n        }else{\n            return (false, false);\n        }\n    }\n    // /**\n    //  *\n    //  */\n    function isDeposit(uint8 _type) external view returns (bool) {\n        if(_type == 1){\n            return _fullnodeDeposits[msg.sender] != 0;\n        } else if(_type == 2){\n            return _privoderDeposits[msg.sender] != 0;\n        }\n        return false;\n    }\n\n    // /**\n    //  *\n    //  */\n    function getDeposit(address walletAddress) external view returns (uint, uint) {\n        return (_fullnodeDeposits[walletAddress], _privoderDeposits[walletAddress]);\n    }\n\n    function stakeAmount(uint8 _type, address walletAddress, uint amount) external {\n        if(_type == 1){\n            require(balanceOf(msg.sender) >= amount, \"Not enough CSD\");\n            _transfer(msg.sender, address(this), amount);\n            _fullnodeDeposits[walletAddress] += amount;\n        }else if(_type == 2){\n            require(balanceOf(msg.sender) >= amount, \"Not enough CSD\");\n            _transfer(msg.sender, address(this), amount);\n            _privoderDeposits[walletAddress] += amount;\n        }\n    }\n    // /**\n    //  *\n    //  */\n    function stake(uint8 _type) external {\n        if(_type == 1){\n            require(_fullnodeDeposits[msg.sender] == 0, \"Already staked\");\n            require(balanceOf(msg.sender) >= _fullnodeDepositAmount, \"Not enough CSD\");\n            _transfer(msg.sender, address(this), _fullnodeDepositAmount);\n            _fullnodeDeposits[msg.sender] += _fullnodeDepositAmount;\n        }else if(_type == 2){\n            require(_privoderDeposits[msg.sender] == 0, \"Already staked\");\n            require(balanceOf(msg.sender) >= _privoderDepositAmount, \"Not enough CSD\");\n            _transfer(msg.sender, address(this), _privoderDepositAmount);\n            _privoderDeposits[msg.sender] += _privoderDepositAmount;\n        }\n    }\n    // /**\n    //  *\n    //  */\n\n    function withdraw(uint8 _type) external {\n        if(_type == 1){\n            require(_fullnodeDeposits[msg.sender] > 0);\n            _transfer(address(this), msg.sender, _fullnodeDeposits[msg.sender]);\n            delete _fullnodeDeposits[msg.sender];\n        }else if(_type == 2){\n            require(_privoderDeposits[msg.sender] > 0);\n            _transfer(address(this), msg.sender, _privoderDeposits[msg.sender]);\n            delete _privoderDeposits[msg.sender];\n        }\n    }\n\n    function getOrdersInfo(string memory orderId) public view returns(Order memory){\n        return (_orders[orderId]);\n    }\n\n    function clientOrder(string memory name, uint32 duration, string memory orderId, uint amount, address to) external {\n        require(!_orders[orderId].used, \"Already paid\");\n        require(balanceOf(msg.sender) >= amount, \"Not enough CSD\");\n        _transfer(msg.sender, address(this), amount);\n        _orders[orderId] = Order(name, block.timestamp, block.timestamp + duration * _durationUnit, 0, duration, amount, true, false, msg.sender , to);\n        _privoderOrders[to].push(orderId);\n    }\n\n    function checkOrder(string memory orderId) public view returns(bool) {\n        return (_orders[orderId].used);\n    }\n\n    function getPrivoderOrders(address from) public view returns(string[] memory ){\n        return _privoderOrders[from];\n    }\n\n    function getAllOrderTokens() external view returns(uint){\n        if (_privoderDeposits[msg.sender] == 0){\n            return 0;\n        }\n        string[] memory orders = _privoderOrders[msg.sender];\n        uint amount = 0;\n        for (uint i=0; i < orders.length; i++){\n            if (!_orders[orders[i]].withdraw){\n                if(block.timestamp >= _orders[orders[i]].endTime){\n                    uint duration = _orders[orders[i]].duration  - _orders[orders[i]].withdrawDuration;\n                    amount += (_orders[orders[i]].amount / _orders[orders[i]].duration) * duration;\n                }else{\n                    uint duration = (block.timestamp - _orders[orders[i]].startTime) / _durationUnit  - _orders[orders[i]].withdrawDuration;\n                    amount += (_orders[orders[i]].amount / _orders[orders[i]].duration) * duration;\n                }\n            }\n        }\n        return (amount);\n    }\n\n    function withdrawAllOrderTokens() external {\n        require(_privoderDeposits[msg.sender] != 0, 'Not deposits');\n        string[] memory orders = _privoderOrders[msg.sender];\n        uint amount = 0;\n        for (uint i=0; i < orders.length; i++){\n            if (!_orders[orders[i]].withdraw){\n                if(block.timestamp >= _orders[orders[i]].endTime){\n                    _orders[orders[i]].withdraw = true;\n                    uint duration = _orders[orders[i]].duration  - _orders[orders[i]].withdrawDuration;\n                    amount += (_orders[orders[i]].amount / _orders[orders[i]].duration) * duration;\n                }else{\n                    uint duration = (block.timestamp - _orders[orders[i]].startTime) / _durationUnit  - _orders[orders[i]].withdrawDuration;\n                    _orders[orders[i]].withdrawDuration += duration;\n                    amount += (_orders[orders[i]].amount / _orders[orders[i]].duration) * duration;\n                }\n            }\n        }\n        _transfer(address(this), msg.sender, amount);\n    }\n\n    function withdrawOrderTokens(string memory orderId) external {\n        require(!_orders[orderId].withdraw, 'The order has been withdrawn');\n        require(_orders[orderId].privoderAddress == msg.sender, 'Please confirm the wallet address, Can not withdraw');\n        if(block.timestamp >= _orders[orderId].endTime){\n            _orders[orderId].withdraw = true;\n            uint duration = _orders[orderId].duration  - _orders[orderId].withdrawDuration;\n            uint amount = (_orders[orderId].amount / _orders[orderId].duration) * duration;\n            _transfer(address(this), msg.sender, amount);\n        }else{\n            uint duration = (block.timestamp - _orders[orderId].startTime) / _durationUnit  - _orders[orderId].withdrawDuration;\n            _orders[orderId].withdrawDuration += duration;\n            uint amount = (_orders[orderId].amount / _orders[orderId].duration) * duration;\n            _transfer(address(this), msg.sender, amount);\n        }\n    }\n}"
    },
    "contracts/Erc20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\n// This is the main building block for smart contracts.\ncontract ERC20 {\n    string public name = \"CloudSlit Dao\";\n    string public symbol = \"CSD\";\n    uint256 public totalSupply;\n    uint8 public decimals = 18;\n\n    mapping(address => uint256) private balances;\n    mapping(address => mapping(address => uint256)) private allowances;\n\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        totalSupply += amount;\n        // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n        balances[account] += amount;\n    }\n\n    function transfer(address to, uint256 amount) public virtual returns (bool){\n        // Check if the transaction sender has enough tokens.\n        // If `require`'s first argument evaluates to `false` then the\n        // transaction will revert.\n        require(balances[msg.sender] >= amount, \"Not enough tokens\");\n\n        // Transfer the amount.\n        _transfer(msg.sender, to, amount);\n        return true;\n    }\n    /**\n         * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        uint256 fromBalance = balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        balances[from] = fromBalance - amount;\n        // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n        // decrementing then incrementing.\n        balances[to] += amount;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool){\n        allowances[msg.sender][spender] = value;\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256){\n        return allowances[owner][spender];\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return balances[account];\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}